@model TechShop.Core.Models.Category

<div class="modal fade" id="createModal" tabindex="-1" aria-labelledby="centeredModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="createModalLabel">Create</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<form  asp-action="Create" id="createForm" method="post">
					@Html.AntiForgeryToken()
					<div class="form-group">
						<label asp-for="Name" class="control-label"></label>
						<input asp-for="Name" id="Name" class="form-control"/>
						<span asp-validation-for="Name" class="text-danger" id="NameError"></span>
					</div>
					<div class="form-group">
						<label asp-for="Description" class="control-label"></label>
						<input asp-for="Description" id="Description" class="form-control" />
						<span asp-validation-for="Description" class="text-danger" id="DescriptionError"></span>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
						<input type="button" id="createsubmit" value="Create" class="btn btn-primary" />
					</div>
				</form>
			</div>
		</div>
	</div>	
</div>

<script>
	$.validator.addMethod("lettersOnly", function (value, element) {
		return this.optional(element) || /^[a-zA-Z\s]+$/.test(value);
	}, "Name must contain only letters and spaces");
	$("#createForm").validate({
		rules: {
			Name: {
				required: true,
				maxlength: 99,
				lettersOnly: true,
				normalizer: function (value) {
					return $.trim(value);
				}
			},
			Description: {
				maxlength: 99,
			}
		},
		messages: {
			Name: {
				required: "Name is required",
				maxlength: "The name length is not greater than 100 character",
				lettersOnly: "Name must contain only letters and spaces"
			}, Description: {
				maxlength: "The description length is not greater than 100 character",
			}
		},
		errorClass: "text-danger",
		validClass: "text-success",
		errorElement: "span"
	});</script>
<script>
	$(document).ready(function () {
		const datatableCate = $("#categoriesTable");
		const _url = "/Admin/Categories/GetDataCategory";
		let dt = null;
		console.log(datatableCate)
		//handelShowTable(url);
		function handelShowTable(url) {
			showDataTableServerSide(url, datatableCate, [
				{ data: "id", visible: false },
				{ data: "name", title: "Category Name" },
				{ data: "description", title: "Description" },
				{ data: "urlSlug", title: "UrlSlug" },
				{ data: "createAt", title: "CreateAt" }
			], false, true, true, (dataTableInstance) => {
				dt.destroy();
				dt = dataTableInstance
				dataTableInstance.on('click', '.delete-btn', function () {

					const _id = $(this).data('id');
					var _url = '@Url.Action("Delete", "Categories")/' + _id.toUpperCase();
					console.log(_url, _id);
					$('#deleteModalContent').load(_url, function () {
						$(document).on('hidden.bs.modal', '.modal', function () {
							$(this).remove();
						});
						$('#centeredModalDelete').modal('show');
					});
					console.log(dt, _id.toUpperCase());
				});
				dataTableInstance.on('click', '.edit-btn', function () {

					const _id = $(this).data('id');
					var _url = '@Url.Action("Edit", "Categories")/' + _id;
					$(document).on('hidden.bs.modal', '.modal', function () {
						$(this).remove();
					});
					$('#editModalContent').load(_url, function () {
						$('#editModal').modal('show');
					});
					console.log(dt, _id);
				})
			});
		}
		function showDataTableServerSide(url, dataTable, columnOptions, isAddBtnDetail = true, isAddBtnEdit = true, isAddBtnDelete = true, callBack) {

			if (isAddBtnDetail == true || isAddBtnEdit == true || isAddBtnDelete == true) {
				columnOptions.push({
					data: null,
					orderable: false,
					className: "text-center",
					render: function (data, type, row) {
						let buttons = '';
						if (isAddBtnDetail) {
							buttons += `<button class="btn btn-info detail-btn" data-id="${row.id}">Detail</button> `;
						}
						if (isAddBtnEdit) {
							buttons += `<button class="btn btn-primary edit-btn" data-id="${row.id}">Edit</button> `;
						}
						if (isAddBtnDelete) {
							buttons += `<button class="btn btn-danger delete-btn" data-id="${row.id}">Delete</button>`;
						}
						return buttons.trim();
					}
				});
			}

			const dataTableInstance = dataTable.DataTable({
				processing: true,
				serverSide: true,
				destroy: true,
				select: true,
				ajax: {
					url: url,
					type: 'POST'
				},
				language: {
					search: "",
					searchPlaceholder: "Search...",
					infoFiltered: ""
				},
				columns: columnOptions,
				lengthMenu: [5, 10, 25, 50, 100]
			});

			callBack(dataTableInstance, dataTable)
		}
		$('#createsubmit').on('click', function (e) {
			e.preventDefault(); // Prevent the form from submitting normally

			var form = $('#createForm');
			var newName = $('#Name').val().replace(/\s+/g, ' ').trim().toLowerCase(); // Get the new name from the form
			var isDuplicate = false;
			// Check if the name already exists in the table
			$('#categoriesTable tbody tr').each(function () {
				var existingName = $(this).find('td').eq(0).text().trim().toLowerCase();
				if (newName === existingName) {
					isDuplicate = true;
					return false; // Break the loop if a duplicate is found
				}
			});

			if (isDuplicate) {
				// Show an error message for the duplicate entry
				$('#NameError').text('Category name already exists.').addClass('text-danger');
			} 
			else {
				// Clear any previous error messages
				$('#NameError').text('');

				if (form.valid()) {
					var url = form.attr('action');
					var data = form.serialize();

					$.ajax({
						type: 'POST',
						url: url,
						data: data,
						success: function (response) {
							//$('#categoryTableContainer').html(response);
							if (response.length != 0) {
								showAlertSuccess("Create success!");
								handelShowTable(_url);
							} else {
								showAlertError("Create failed!");
							}
						},
						error: function (xhr, status, error) {
							// Handle errors if any
							console.log(xhr.responseText, error);
						}
					});
					$('#createModal').modal('hide');
				}
			}
		});
	});

</script>
