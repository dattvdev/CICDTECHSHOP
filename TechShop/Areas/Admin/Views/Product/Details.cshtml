@model TechShop.Core.Models.Product

@section Styles {
    <style>
        .carousel-item img {
            transition: opacity 0.5s ease-in-out;
            opacity: 0;
            width: 50%;
            height: 50%; 
            object-fit: cover; 
        }

        .carousel-item.active img {
            opacity: 1;
        }

        .carousel-item {
            transition: none !important;
        }

        .image-label {
            flex: 0 0 15%;
            max-width: 15%;
        }

        .link-container {
            flex: 0 0 75%; /* 50% width */
            max-width: 75%; /* Prevents exceeding the width */
            overflow: hidden; /* Ensures no overflow if content is too long */
        }

        .scrollable-link {  
            max-width: 100%; /* Full width within its container */
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            color: #007bff; /* Link color, adjust as needed */
            text-decoration: none; /* Remove underline if desired */
        }

            .scrollable-link:hover {
                text-decoration: underline; /* Add underline on hover */
            }

        .copy-icon {
            flex: 0 0 5%; /* Adjust as needed, auto width */
        }

        .remove-icon {
            flex: 0 0 5%; /* Adjust as needed, auto width */
        }

        .filter-item {
            border-radius: 20px;
            border: 2px solid black;
            background-color: transparent;
            color: black;
            padding: 5px 15px;
            transition: background-color 0.3s, border-color 0.3s, color 0.3s, padding 0.3s;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            overflow: hidden;
        }

            .filter-item:hover,
            .filter-item.selected {
                background-color: #28a745;
                border-color: #28a745;
                color: white;
                padding-right: 30px;
            }

                .filter-item.selected:hover {
                    background-color: red;
                    border-color: red;
                    color: white;
                }

            .filter-item i {
                position: absolute;
                right: 10px;
                opacity: 0;
                transform: translateX(10px);
                transition: opacity 0.3s, transform 0.3s;
            }

            /* Show the default icon only on hover */
            .filter-item:hover .default-icon,
            .filter-item.selected .default-icon {
                opacity: 1;
                transform: translateX(0);
            }

            /* Show the remove icon when hovering over a selected filter */
            .filter-item.selected:hover .remove-icon {
                opacity: 1;
                transform: translateX(0);
            }

            /* Hide the default icon when hovering over a selected filter */
            .filter-item.selected:hover .default-icon {
                opacity: 0;
                transform: translateX(10px);
            }

        #contentDisplay::-webkit-scrollbar {
            width: 12px;
        }

        #contentDisplay::-webkit-scrollbar-track {
            background: #f1f1f1;
        }

        #contentDisplay::-webkit-scrollbar-thumb {
            background: #888;
        }

            #contentDisplay::-webkit-scrollbar-thumb:hover {
                background: #555;
            }

        #color-container {
            max-height: 600px;
            overflow: scroll; /* Ensure content can still be scrolled */
        }

            #color-container::-webkit-scrollbar {
                display: none; /* For Chrome, Safari, and Opera */
            }

        #color-container {
            -ms-overflow-style: none; /* For Internet Explorer and Edge */
            scrollbar-width: none; /* For Firefox */
        }
    </style>
}

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-12">
            <div class="card">
                <div class="card-body">
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb" style="padding: 0; margin-bottom: 0; background: none;">
                            <li class="breadcrumb-item" aria-current="page">
                                <a href="@Url.Action("Index", "Home")">Dashboard</a>
                            </li>
                            <li class="breadcrumb-item" aria-current="page">
                                <a href="@Url.Action("Index", "Product")">Products</a>
                            </li>
                            <li class="breadcrumb-item active" aria-current="page">@Model.Id</li>
                        </ol>
                    </nav>
                </div>
            </div>
        </div>
    </div>
    @await Component.InvokeAsync("UpdateInformationProduct", new { product = Model })

    <div class="row justify-content-center">
        @await Component.InvokeAsync("UpdateMainImageProduct", new { product = Model })
       @*  <div id="renderContentImage" class="col-md-8">
            <div class="card">
                <div class="card-title p-2">
                    <h5 class="mb-0">Content Images</h5>
                </div>
                <div class="card-body" style="max-height: 300px; overflow-y: auto;">
                    <div id="containerContentImages" class="card mb-2">
                        @await Component.InvokeAsync("UpdateContentImageProduct", new { product = Model })
                    </div>
                </div>
                <div class="card-footer text-center" style="background-color: #ffffff;">
                    <button class="btn btn-primary" id="addContentImage" data-toggle="modal" data-target="#contentImageModal">Add Image</button>
                </div>
            </div>
        </div> *@
    </div>
    @await Component.InvokeAsync("UpdateSlideImageProduct", new { product = Model })
    @await Component.InvokeAsync("UploadContentProduct", new { product = Model })
    @* @await Component.InvokeAsync("UpdateFilterProduct", new { product = Model }) *@
    @await Component.InvokeAsync("UpdateHardwareProduct", new { product = Model })
</div>

<div class="modal fade" id="deleteImageModal" tabindex="-1" aria-labelledby="deleteImageModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteImageModalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this image?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteImage">Delete</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="contentImageModal" tabindex="-1" role="dialog" aria-labelledby="contentImageModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="contentImageModalLabel">Add Content Image</h5>
                <button type="button" class="close closeContentImage" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="formContentImage">
                    <div class="form-group">
                        <label for="imageInput">Select Image File</label>
                        <input type="file" class="form-control-file" id="imageInput" name="imageInput" accept="image/*">
                    </div>
                    <div class="form-group">
                        <label for="altInput">Alt</label>
                        <input type="text" class="form-control" id="altInput" name="altInput" placeholder="Enter alt image">
                    </div>
                    <div class="form-group">
                        <label for="titleInput">Title</label>
                        <input type="text" class="form-control" id="titleInput" name="titleInput" placeholder="Enter title image">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button id="closeContentImage" type="button" class="btn btn-secondary closeContentImage" data-dismiss="modal">Close</button>
                <button id="saveContentImage" type="button" class="btn btn-primary">Save</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="uploadProgressModal" tabindex="-1" role="dialog" aria-labelledby="uploadProgressLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="uploadProgressLabel">Uploading Image</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="progress">
                    <div id="progressBar" class="progress-bar" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
                </div>
                <p id="progressStatus">0% Complete</p>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="productColorModal" tabindex="-1" role="dialog" aria-labelledby="productColorLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create Product colors</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                </button>
            </div>
            <div class="modal-body">
                <div>
                    <span>Name of Product Hardware</span>
                    <input class="form-control" id="nameProductHardwareSelected" />
                    <button class="btn btn-primary mt-1" id="btn_addProductColor">Add colors</button>
                </div>
                <div id="color-container" style="max-height: 400px; overflow: scroll">
                </div>
                <div class="d-flex justify-content-end align-content-center gap-2">
                    <button id="btn_deleteProductHardware" class="btn btn-danger my-3">
                        Delete
                    </button>
                    <button id="btn_saveProductColor" class="btn btn-primary my-3">
                        Save
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>



@section Scripts {
    <script>
        $(document).ready(function () {
            const productColorModal = $("#productColorModal");
            const color_container = $("#color-container");
            const nameProductHardwareSelected = $("#nameProductHardwareSelected");
            const btn_saveProductColor = $("#btn_saveProductColor")
            const btn_deleteProductHardware = $("#btn_deleteProductHardware")
            productColorModal.modal("hide");
            let productColors = [];

            $(document).on("click", ".btn-hardwareProduct", function () {
                let idProductHardware = $(this).data("id");

                methodGet(`@Url.Action("GetProductColorsByHardwareId", "Product")?id=${idProductHardware}`, (response) => {
                    nameProductHardwareSelected.val(response.hardWareName);
                    productColors = response.productColors.map(r => ({
                        id: r.id,
                        rgb: r.rgb,
                        quantity: r.quantity,
                        productHardwareId: r.productHardwareId,
                        price: r.price
                    }));
                    loadData();
                });

                let btn_addProductColor = $("#btn_addProductColor");
                productColorModal.modal("show");


                btn_addProductColor.off("click").on("click", function () {
                    productColors.unshift({
                        rgb: "#ff0000",
                        quantity: 1,
                        productHardwareId: idProductHardware,
                        price: 100
                    });
                    console.log(productColors)
                    loadData();
                });

                color_container.off("click", ".delete-color-product").on("click", ".delete-color-product", function () {
                    let parentDiv = $(this).closest('.color-container');
                    let index = parentDiv.data("index");
                    if (Array.isArray(productColors) && index >= 0 && index < productColors.length) {
                        productColors.splice(index, 1);
                        loadData();
                    }
                });

                color_container.off("change", ".productColorQuantityInput").on("change", ".productColorQuantityInput", function () {
                    let parentDiv = $(this).closest('.color-container');
                    let index = parentDiv.data("index");
                    let quantityValue = Number($(this).val());
                    productColors[index].quantity = quantityValue;
                });

                color_container.off("change", ".productColorInput").on("change", ".productColorInput", function () {
                    let parentDiv = $(this).closest('.color-container');
                    let index = parentDiv.data("index");
                    let RGPValue = $(this).val();
                    productColors[index].rgb = RGPValue;
                });

                color_container.off("change", ".productColorPriceInput").on("change", ".productColorPriceInput", function () {
                    let parentDiv = $(this).closest('.color-container');
                    let index = parentDiv.data("index");
                    let price = Number($(this).val());
                    productColors[index].price = price;
                });

                btn_deleteProductHardware.off("click").on("click", function () {
                    methodGet(`@Url.Action("DeleteProductHardware", "Product")?id=${idProductHardware}`, (response) => {
                        if (response.isSuccess) {
                            let button = $(`button[data-id="${idProductHardware}"]`);
                            button.remove()
                            productColorModal.modal("hide");
                            showAlertSuccess(response.message);
                        } else {
                            showAlertError(response.message);
                        }
                    }, (xhr, status, error) => {
                        console.error('Error:', error);
                        productColorModal.modal('hide');
                        showAlertError('An error occurred while delete product hardware.');
                    })
                })

                btn_saveProductColor.off("click").on("click", function () {
                    let nameHardware = nameProductHardwareSelected.val().trim();
                    if (nameHardware.trim().length == 0) {
                        showAlertError("Please input name hardware");
                        return;
                    }
                    $.ajax({
                        url: '@Url.Action("UpdateNewListProductColor", "Product")',
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({
                            productColors: productColors,
                            productHardwareId: idProductHardware,
                            ProductHardwareName: nameHardware
                        }),
                        success: function (response) {
                            //productColorModal.modal('hide');
                            if (response.isSuccess) {
                                let button = $(`button[data-id="${idProductHardware}"]`);
                                button.text(response.nameHardware);
                                showAlertSuccess(response.message);
                                productColors = response.productColors
                                loadData()
                            } else {
                                showAlertError(response.message);
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error('Error:', error);
                            productColorModal.modal('hide');
                            showAlertError('An error occurred while adding new product colors.');
                        }
                    });
                });

            });

            function loadData() {
                color_container.empty();
                productColors.forEach((item, index) => {
                    color_container.append(`
                            <div class="color-container my-2" data-id="${item.id}" data-index="${index}">
                                <div class="color-picker-container mb-2">
                                    <div class="input-group">
                                        <span class="input-group-text" id="basic-addon1">Choose Color</span>
                                        <input class="form-control productColorInput" type="color" name="colorPicker" value="${item.rgb}">
                                    </div>
                                </div>
                                <div class="row g-2">
                                    <div class="col">
                                        <label for="price-${index}" class="form-label">Price</label>
                                        <input id="price-${index}" class="form-control productColorPriceInput productColorNumberInput" type="number" placeholder="Price" name="price" value="${item.price}">
                                    </div>
                                    <div class="col">
                                        <label for="quantity-${index}" class="form-label">Quantity</label>
                                        <input id="quantity-${index}" class="form-control productColorQuantityInput productColorNumberInput" type="number" placeholder="Quantity" name="quantity" value="${item.quantity}">
                                    </div>
                                </div>
                                <button type="button" class="btn btn-danger delete-color-product mt-2">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                                <hr />
                            </div>

                            `);
                });
            }

            $(document).on('input', '.productColorNumberInput', function () {
                let value = $(this).val();
                value = value.replace(/^0+/, '');

                if (value < 0) {
                    value = 1;
                }

                $(this).val(value);
            });

            function methodGet(url, callBackSuccess, callBackError) {
                $.ajax({
                    url: url,
                    type: 'GET',
                    dataType: 'json',
                    success: function (res) {
                        callBackSuccess(res)
                    },
                    error: function (xhr, status, error) {
                        callBackError(xhr, status, error)
                    }
                });
            }
        });
    </script>
    <script>
        var productId = $("#Id").val();
        document.addEventListener('DOMContentLoaded', function () {
            var initialContent = `@Html.Raw(Model.Description)`;
            console.log(productId);

            $.validator.addMethod("uniqueName", function (value, element) {
                var isSuccess = false;
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("IsProductNameAvailableWithProductId", "Product", new { area = "Admin" })',
                    data: { name: value, productId: productId },
                    dataType: "json",
                    async: false,
                    success: function (response) {
                        isSuccess = response;
                    }
                });
                return !isSuccess;
            }, "This name is already taken, please choose another.");

            $("#UpdateInformationForm").validate({
                rules: {
                    Name: {
                        required: true,
                        uniqueName: true,
                        maxlength: 100,
                        normalizer: function (value) {
                            return $.trim(value);
                        }
                    },
                    UrlSlug: {
                        required: true
                    }
                },
                messages: {
                    Name: {
                        required: "Please enter Product name.",
                        uniqueName: "This name is already taken, please choose another.",
                        maxlength: "The product name must not exceed 100 characters"
                    },
                    UrlSlug: {
                        required: "URL Slug cannot be empty."
                    }
                },
                errorClass: "text-danger",
                errorElement: "span"
            });

            $('#Name').on('input', function () {
                var nameValue = $(this).val();
                $.ajax({
                    url: '@Url.Action("ConvertURLSlug", "Product")',
                    type: 'POST',
                    data: {
                        productName: nameValue
                    },
                    dataType: 'json',
                    success: function (response) {
                        $("#UrlSlug").val(response);
                    },
                    error: function (xhr, status, error) {
                        console.error('Error:', error);
                    }
                });
            });

            $("#saveInformationProduct").on("click", function (event) {
                event.preventDefault();
                var form = $("#UpdateInformationForm");
                if (form.valid()) {
                    var formData = form.serializeArray();
                    $('#UpdateInformationForm').find(':disabled').each(function () {
                        var name = $(this).attr('name');
                        var value = $(this).val();
                        if (name) {
                            formData.push({ name: name, value: value });
                        }
                    });
                    var serializedData = $.param(formData);
                    $.ajax({
                        url: '@Url.Action("UpdateInformationProduct", "Product")',
                        type: 'POST',
                        data: formData,
                        dataType: 'json',
                        success: function (response) {
                            if (response.isSuccess) {
                                showAlertSuccess(response.message);
                            } else {
                                showAlertError(response.message);
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error('Error:', error);
                        }
                    });
                }
            })

            $("#DeleteProduct").on("click", function (event) {
                event.preventDefault();
                var form = $("#UpdateInformationForm");

                var id = $('#Id').val();
                var name = $('#Name').val();
                console.log(id);
                console.log(name);

                $('#centeredModalDelete').modal('show');

                $("#confirmDeleteBtn").on("click", function (event) {
                    $.ajax({
                        url: '@Url.Action("DeleteProductConfirm", "Product")',
                        type: 'POST',
                        data: {
                            id: id,
                        },
                        success: function (response) {
                            if (response.isSuccess) {
                                showAlertSuccess(response.message);
                                window.location.href = response.redirectUrl;
                            } else {
                                showAlertError(response.message);
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error('Error:', error);
                        }
                    });
                })

            })

            $('#imagePreview').on('click', function () {
                $('#imageInput').click();
            });

            $('#imageInput').on('change', function (event) {
                const file = event.target.files[0];
                const imagePreview = $('#imagePreview');

                if (file) {
                    const validExtensions = ['image/jpeg', 'image/png'];
                    const maxSize = 2 * 1024 * 1024;
                    // Validate file type
                    if (!validExtensions.includes(file.type)) {
                        showAlertError('Please upload a JPG or PNG image.');
                        return;
                    }
                    if (file.size > maxSize) {
                        showAlertError('Please upload an image smaller than 2MB.');
                        return;
                    }

                    const reader = new FileReader();

                    reader.onload = function (e) {
                        imagePreview.attr('src', e.target.result);
                    };

                    reader.readAsDataURL(file);

                    const formData = new FormData();
                    formData.append('file', file);

                    formData.append('productId', productId);

                    $('#uploadProgressModal').modal('show');

                    $.ajax({
                        url: '@Url.Action("UploadImage", "Product")', // Adjust URL as needed
                        type: 'POST',
                        data: formData,
                        processData: false, // Prevent jQuery from automatically transforming the data into a query string
                        contentType: false, // Set content type to false to let the browser set it
                        xhr: function () {
                            var xhr = new XMLHttpRequest();
                            xhr.upload.addEventListener('progress', function (e) {
                                if (e.lengthComputable) {
                                    var percentComplete = Math.round((e.loaded / e.total) * 100);
                                    $('#progressBar').css('width', percentComplete + '%');
                                    $('#progressStatus').text(percentComplete + '% Complete');
                                }
                            }, false);
                            return xhr;
                        },
                        success: function (response) {
                            // Hide progress indicator
                            $('#uploadProgressModal').modal('hide');
                            if (response.isSuccess) {
                                showAlertSuccess(response.message); // Assuming this function exists
                            } else {
                                showAlertError(response.message); // Make sure this function exists too
                            }
                            // Handle the response from the server
                        },
                        error: function (xhr, status, error) {
                            console.error('Error:', error);
                            // Hide progress indicator
                            $('#uploadProgressModal').modal('hide');
                            showAlertError('An error occurred while uploading the image.');
                        }
                    });
                }
            });

            tinymce.init({
                selector: '#contentEditor',
                plugins: 'advlist autolink lists link image charmap preview anchor textcolor',
                toolbar: 'undo redo | formatselect | bold italic backcolor | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | removeformat | image',
                menubar: false,
                setup: function (editor) {
                    editor.on('init', function () {
                        editor.setContent(initialContent);
                    });
                }
            });

            $("#saveContent").on("click", function () {
                var editor = tinymce.get('contentEditor');
                if (editor) {
                    const content = editor.getContent();
                    const formData = new FormData();

                    formData.append('productId', productId);
                    formData.append('content', content);

                    $.ajax({
                        url: '@Url.Action("SaveContent", "Product")',
                        type: 'POST',
                        data: formData,
                        processData: false,
                        contentType: false,
                        success: function (response) {
                            if (response.isSuccess) {
                                showAlertSuccess(response.message);
                            } else {
                                showAlertError(response.message);
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error('Error:', error);
                            showAlertError(error);
                        }
                    });
                }
            })

            $("#changeContent").on("click", function () {
                if ($('#contentDisplay').css('display') === 'none') {
                    const content = tinymce.get('contentEditor').getContent();
                    console.log(content);

                    const decodedContent = decodeHtmlEntities(content);
                    $('#contentDisplay').show().html(decodedContent);

                    tinymce.get('contentEditor').hide();
                    $("#contentEditor").hide();
                    $("#saveContent").hide();
                } else {
                    $("#contentDisplay").hide();
                    tinymce.get('contentEditor').show();
                    $("#saveContent").show();
                }
            })

            function decodeHtmlEntities(encodedString) {
                let textarea = document.createElement('textarea');
                textarea.innerHTML = encodedString;
                return textarea.value;
            }

            var selectedFilterIds = [];

            function getSelectedFilterIds() {
                const selectedIds = [];

                $('.filter-item.selected').each(function () {
                    const id = $(this).attr('id');
                    selectedIds.push(id);
                });

                return selectedIds;
            }

            window.updateFilter = function (filterId) {
                const $button = $(`#${filterId}`);
                const isSelected = $button.hasClass('selected');
                if (isSelected) {
                    $button.removeClass('selected');
                } else {
                    $button.addClass('selected');
                }

                selectedFilterIds = getSelectedFilterIds();
                $('#selectedFilters').val(selectedFilterIds.join(','));

                console.log('Updated selected filter IDs:', selectedFilterIds);
            }

            $("#saveFilters").on("click", function () {
                const selectedFilterIds = getSelectedFilterIds();
                const formData = new FormData();

                formData.append('productId', productId);
                formData.append('selectedFilters', selectedFilterIds);

                console.log(selectedFilterIds);

                $.ajax({
                    url: '@Url.Action("SaveFilters", "Product")',
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function (response) {
                        if (response.isSuccess) {
                            showAlertSuccess(response.message);
                        } else {
                            showAlertError(response.message);
                        }
                    },
                    error: function (error) {
                        console.error('Save failed:', error);
                        showAlertError(error);
                    }
                });
            })

            $("#addContentImage").on("click", function () {
                $("#contentImageModal").modal("show");
            })

            $(".closeContentImage").on("click", function () {
                $("#contentImageModal").modal("hide");
            })

            $.validator.addMethod('fileRequired', function (value, element) {
                return $(element).val() !== '';
            }, 'Please select a file.');

            $.validator.addMethod('fileSize', function (value, element, maxSize) {
                var isValid = true;
                for (var i = 0; i < element.files.length; i++) {
                    if (element.files[i].size > maxSize) {
                        isValid = false;
                        break;
                    }
                }
                return isValid;
            }, 'File size must be less than {0} bytes.');

            $.validator.addMethod('fileType', function (value, element, types) {
                if (element.files.length > 0) {
                    var fileType = element.files[0].type;
                    return types.split('|').indexOf(fileType) > -1;
                }
                return true;
            }, 'Invalid file type.');

            $("#formContentImage").validate({
                rules: {
                    imageInput: {
                        fileRequired: true,
                        fileSize: 2000000,
                        fileType: "image/jpeg|image/png"
                    },
                    altInput: {
                        required: true,
                        maxlength: 50,
                        normalizer: function (value) {
                            return $.trim(value);
                        }
                    },
                    titleInput: {
                        required: true,
                        maxlength: 50,
                        normalizer: function (value) {
                            return $.trim(value);
                        }
                    }
                },
                messages: {
                    imageInput: {
                        fileRequired: "Please select an image file",
                        fileSize: "File size must be less than 2MB",
                        fileType: "Only JPG and PNG files are allowed"
                    },
                    altInput: {
                        required: "Please enter Alt",
                        maxlength: "The Alt must not exceed 50 characters"
                    },
                    titleInput: {
                        required: "Please enter Title",
                        maxlength: "The Title must not exceed 50 characters"
                    }
                },
                errorClass: "text-danger",
                errorElement: "span"
            });

            $("#formContentSlide").validate({
                rules: {
                    slideImageInput: {
                        fileRequired: true,
                        fileSize: 2000000,
                        fileType: "image/jpeg|image/png"
                    },
                },
                messages: {
                    slideImageInput: {
                        fileRequired: "Please select an image file",
                        fileSize: "File size must be less than 2MB",
                        fileType: "Only JPG and PNG files are allowed"
                    },
                },
                errorClass: "text-danger",
                errorElement: "span"
            });

            $("#saveContentSlide").click(function () {
                if ($("#formContentSlide").valid()) {
                    var $saveButton = $(this);

                    // Change button text to loading state and disable it
                    $saveButton.html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving...');
                    $saveButton.prop('disabled', true);

                    var formData = new FormData($("#formContentSlide")[0]);
                    formData.append('productId', productId);

                    $.ajax({
                        url: '@Url.Action("AddSlideImage", "Product")',
                        type: 'POST',
                        data: formData,
                        contentType: false,
                        processData: false,
                        success: function (response) {
                            if (response.images && response.images.length > 0) {
                                showAlertSuccess(response.message);

                                response.images.forEach(function (image) {
                                    // Generate HTML for each new slide
                                    var newSlideHtml = `
                                    <div class="carousel-item">
                                        <div class="position-relative">
                                            <img src="${image.urlImage}" alt="${image.alt}" title="${image.title}" class="d-block w-100" style="object-fit: cover;">
                                            <button type="button" class="btn-close position-absolute top-0 end-0 m-2 removeSlideImage" style="z-index: 100" aria-label="Close" data-id="${image.id}" data-bs-toggle="modal" data-bs-target="#deleteSlideImageModal"></button>
                                        </div>
                                    </div>`;

                                    // Append the new slide to the carousel
                                    $("#slideContainer").append(newSlideHtml);
                                });

                                // Update carousel state
                                $("#slideContainer .carousel-item").removeClass("active"); // Remove active class from previous slides
                                $("#slideContainer .carousel-item").last().addClass("active"); // Set active class to the new slide

                                // Re-initialize carousel to apply changes
                                $('#carouselExampleControls').carousel();

                                $('#contentSlideModal').modal('hide');
                            } else {
                                showAlertError("No images were uploaded.");
                            }
                        },
                        error: function (xhr, status, error) {
                            showAlertError(xhr.responseText);
                        },
                        complete: function () {
                            // Revert button to original state
                            $saveButton.html('Save');
                            $saveButton.prop('disabled', false);
                        }
                    });
                }
            });


            $("#saveContentImage").click(function () {
                if ($("#formContentImage").valid()) {
                    var $saveButton = $(this);

                    // Change button text to loading state and disable it
                    $saveButton.html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving...');
                    $saveButton.prop('disabled', true);

                    var formData = new FormData($("#formContentImage")[0]);
                    formData.append('productId', productId);

                    $.ajax({
                        url: '@Url.Action("AddContentImage", "Product")',
                        type: 'POST',
                        data: formData,
                        contentType: false,
                        processData: false,
                        success: function (response) {
                            if (response.isSuccess) {
                                showAlertSuccess(response.message);

                                var newImageHtml = `
                                    <div class="card-body d-flex align-items-center p-2">
                                        <span class="image-label">Image ${response.countProductImage}:</span>
                                        <div class="link-container">
                                            <a href="${response.imageUrl}" target="_blank" class="scrollable-link">${response.imageUrl}</a>
                                        </div>
                                        <span data-url="${response.imageUrl}"
                                              data-alt="${response.alt}"
                                              data-title="${response.title}"
                                              style="cursor: pointer"
                                              class="copy-icon text-right">
                                            <i class="fas fa-copy"></i>
                                        </span>
                                                  <span data-id="${response.id}" style="cursor: pointer"
                                              class="remove-icon text-right">
                                            <i class="fas fa-times"></i>
                                        </span>
                                    </div>`;

                                $("#containerContentImages").append(newImageHtml);
                            } else {
                                showAlertError(response.message);
                            }
                            $('#contentImageModal').modal('hide');
                        },
                        error: function (xhr, status, error) {
                            showAlertError(xhr.responseText);
                        },
                        complete: function () {
                            // Revert button to original state
                            $saveButton.html('Save');
                            $saveButton.prop('disabled', false);
                        }
                    });
                }
            });

            $("#saveContentHardware").on("click", function () {
                var formData = new FormData($("#formHardware")[0]);
                formData.append('productId', productId);
                $(".selectFilter").each(function (index, element) {
                    var filterValue = $(element).val();
                    // Append each filter to formData with a unique name (e.g., filter_0, filter_1, etc.)
                    formData.append('filters[' + index + ']', filterValue);
                });
                 var concatenatedSpecsAndFilters = "";
                 $(".selectSpecification").each(function (index, specElement) {
                    var specName = $(specElement).find('option:selected').text(); // Lấy tên của specification
                    var specValue = $(specElement).val(); // Lấy giá trị của specification

                    // Tìm filter tương ứng với specification hiện tại
                    var filterElement = $(`#selectFilter_${index + 1}`);
                    var filterName = filterElement.find('option:selected').text(); // Lấy tên của filter
                    var filterValue = filterElement.val(); // Lấy giá trị của filter

                    // Nếu có giá trị cho cả specification và filter
                    if (specValue && filterValue) {
                        // Nối chuỗi theo định dạng "Specification Name: Filter Name"
                        concatenatedSpecsAndFilters += `${specName}: ${filterName}, `;
                    }
                 })
                         concatenatedSpecsAndFilters = concatenatedSpecsAndFilters.slice(0, -2);
                formData.append('name', concatenatedSpecsAndFilters);
                $.ajax({
                    url: '/Admin/Product/AddProductHardware',
                    type: 'POST',
                    data: formData,
                    contentType: false,
                    processData: false,
                    success: function (response) {
                        if (response.isSuccess) {
                            var newHardware = `<button type="button" data-id="${response.id}" class="btn btn-primary me-2 mb-2 btn-hardwareProduct">
                                                        ${response.name}
                                                       </button>`;

                            $("#containerProductHardware").append(newHardware);

                            showAlertSuccess(response.message);
                        } else {
                            showAlertError(response.message);
                        }
                        $('#contentHardwareProductModal').modal('hide');
                    },
                    error: function (xhr, status, error) {
                        showAlertError(xhr.responseText);
                    }
                });
            }); // Added the missing closing parenthesis here



            $("#addSlideImage").on("click", function () {
                $("#contentSlideModal").modal("show");
            })


            $("#closeContentSlide").on("click", function () {
                $("#contentSlideModal").modal("hide");
            })

            document.addEventListener('click', function (event) {
                if (event.target && event.target.matches('.copy-icon, .copy-icon *')) {
                    const span = event.target.closest('.copy-icon');
                    if (span) {
                        const url = span.getAttribute('data-url');
                        const alt = span.getAttribute('data-alt');
                        const title = span.getAttribute('data-title');
                        copyToClipboard(url, alt, title);
                    }
                }
            });
          

        });

        $.validator.addMethod("uniqueHardwareName", function (value, element, params) {
            var isSuccess = false;
            $.ajax({
                type: "POST",
                url: '@Url.Action("IsProductHardwareNameAvailable", "Product", new { area = "Admin" })',
                data: {
                    nameHardwareProductInput: value, productId: params
                },
                dataType: "json",
                async: false,
                success: function (response) {
                    isSuccess = response;
                }
            });
            return !isSuccess;
        }, "This name is already taken, please choose another.");

        const btn_addHardware = $("#addHardwareProduct");
        const model_contentHardware = $("#contentHardwareProductModal");
        const btn_addProductHardware = $("#addProductHardwareBtn");
        var listSpecfication = [];
        var rowHardwareIndex = 0;
        var selectedSpecs = [];

        // Filter out already selected specifications
        function getAvailableSpecifications() {
            return listSpecfication.filter(spec => !selectedSpecs.includes(spec.id));
        }

        btn_addHardware.on("click", function () {
            $("#formHardware").empty();
            model_contentHardware.modal('show');
            var categoryId = $('#CategoryId').val();

            // Fetch specifications by category
            $.ajax({
                url: '/Admin/Specification/GetSpecificationByCategoryId',
                type: 'GET',
                data: { categoryId: categoryId },
                success: function (response) {
                    listSpecfication = response; // Store the specification list
                },
                error: function (xhr, status, error) {
                    console.error('Error:', status, error);
                }
            });
        });

        // Add a new row with dynamic specification options
        btn_addProductHardware.on("click", function () {
            rowHardwareIndex++;

            let availableSpecs = getAvailableSpecifications(); // Get available specs that are not selected yet
            let option1Options = availableSpecs.map(spec => `<option value="${spec.id}">${spec.name}</option>`).join('');

            let newRow = `
                <div class="form-group" id="row_${rowHardwareIndex}">
                    <div class="row">
                        <div class="col-md-4">
                            <label for="selectSpecification_${rowHardwareIndex}">Specification</label>
                            <select id="selectSpecification_${rowHardwareIndex}" class="form-control selectSpecification">
                                <option value="">Select a specification</option>
                                ${option1Options}
                            </select>
                        </div>
                        <div class="col-md-8">
                            <label for="selectFilter_${rowHardwareIndex}">Filter</label>
                            <select id="selectFilter_${rowHardwareIndex}" class="form-control selectFilter">
                                <option value="a">Option A</option>
                                <option value="b">Option B</option>
                                <option value="c">Option C</option>
                            </select>
                        </div>
                    </div>
                </div>
            `;

            // Append the new row
            $("#formHardware").append(newRow);

            // Attach change event handler for dynamically added specification dropdowns
            $(`#selectSpecification_${rowHardwareIndex}`).on("change", function () {
                // Update the selectedSpecs array with the newly selected values
                var specificationId = $(this).val();
                selectedSpecs = $(".selectSpecification").map(function () {
                    return $(this).val();
                }).get().filter(Boolean); // Remove empty selections
                var categoryId = $('#CategoryId').val();
                var filterDropdown = $(this).closest(".row").find(`#selectFilter_${rowHardwareIndex}`);
                $.ajax({
                    url: '/Admin/Specification/GetFilterByCategoryIdAndSpecificationId',
                    type: 'GET',
                    data: { categoryId: categoryId, specificationId: specificationId },
                    success: function (response) {
                        // Clear the existing options in the filter dropdown
                        filterDropdown.empty();

                        // Add new options from the response
                        response.forEach(function (filter) {
                            filterDropdown.append(`<option value="${filter.id}">${filter.name}</option>`);
                        });
                    },
                    error: function (xhr, status, error) {
                        console.error('Error:', status, error);
                    }
                });
                // Update all dropdowns after selection
                updateAllDropdowns();
            });
        });

        // Function to update all dropdown options based on the selected specifications
        function updateAllDropdowns() {
            let availableSpecs = getAvailableSpecifications(); // Available specs for dropdowns
            let optionsHtml = availableSpecs.map(spec => `<option value="${spec.id}">${spec.name}</option>`).join('');

            $(".selectSpecification").each(function () {
                let currentValue = $(this).val(); // Get the current value of the select element
                console.log(currentValue);
                // Rebuild the options for this select element
                $(this).html(`<option value="">Select a specification</option>${optionsHtml}`);
                // Restore the current selection, even if it's part of selectedSpecs
                if (currentValue) {
                    $(this).append(`<option value="${currentValue}" selected>${listSpecfication.find(spec => spec.id === currentValue).name}</option>`);
                }
            });
        }

        let slideIdToDelete = null;

        $('#slideContainer').on('click', '.removeSlideImage', function () {
            $("#deleteSlideImageModal").modal("show");
            slideIdToDelete = $(this).data('id');
        });

        $('#containerContentImages').on('click', '.remove-icon', function () {
            $('#deleteImageModal').modal('show');
            slideIdToDelete = $(this).data('id');
        });

        $(".closeHardwareProduct").on('click', function () {
            model_contentHardware.modal('hide');
        })

        $('#confirmDeleteSlideImage').on('click', function () {
            if (slideIdToDelete) {
                const $deleteButton = $(this);

                // Change button to loading state and disable it
                $deleteButton.html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Deleting...');
                $deleteButton.prop('disabled', true);

                const formData = new FormData();
                formData.append("productImageId", slideIdToDelete);

                $.ajax({
                    url: '@Url.Action("DeleteProductImage", "Product")',
                    type: 'POST',
                    data: formData,
                    contentType: false,
                    processData: false,
                    success: function (response) {
                        if (response.isSuccess) {
                            showAlertSuccess(response.message);

                            // Remove the slide
                            $(`[data-id="${slideIdToDelete}"]`).closest('.carousel-item').remove();

                            // Re-initialize the carousel's active item
                            if (!$('.carousel-item.active').length) {
                                $('.carousel-item').first().addClass('active');
                            }

                            // Re-initialize the carousel
                            var $carousel = $('#slideContainer').closest('.carousel');
                            $carousel.carousel('dispose');
                            $carousel.carousel();

                            slideIdToDelete = null;
                        } else {
                            showAlertError(response.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        showAlertError(xhr.responseText);
                    },
                    complete: function () {
                        // Revert button to original state
                        $deleteButton.html('Delete');
                        $deleteButton.prop('disabled', false);

                        // Hide the modal
                        $('#deleteSlideImageModal').modal('hide');

                        // Ensure backdrop and scrollbar are properly reset
                        $('#deleteSlideImageModal').on('hidden.bs.modal', function () {
                            $('.modal-backdrop').remove();  // Remove the backdrop
                            $('body').removeClass('modal-open');  // Remove the modal-open class from the body
                            $('body').css('overflow', 'auto');  // Restore body overflow
                        });
                    }
                });
            }
        });

        $('#confirmDeleteImage').on('click', function () {
            if (slideIdToDelete) {
                $(this).html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Deleting...');
                $(this).prop('disabled', true);

                $.ajax({
                    url: '@Url.Action("DeleteProductImage", "Product")',
                    type: 'POST',
                    data: { productImageId: slideIdToDelete },
                    success: function (response) {
                        if (response.isSuccess) {
                            showAlertSuccess(response.message);
                            $.ajax({
                                url: '@Url.Action("RenderContentImage", "Product")',
                                type: 'GET',
                                data: { productId: productId },
                                success: function (response) {
                                    $("#containerContentImages").html(response);
                                }
                            })
                        } else {
                            showAlertError(response.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        showAlertError(xhr.responseText);
                    },
                    complete: function () {
                        $('#confirmDeleteImage').html('Delete');
                        $('#confirmDeleteImage').prop('disabled', false);

                        $('#deleteImageModal').modal('hide');

                        $('#deleteImageModal').on('hidden.bs.modal', function () {
                            $('.modal-backdrop').remove();
                            $('body').removeClass('modal-open');
                            $('body').css('overflow', 'auto');
                        });
                    }
                });
                slideIdToDelete = null;
            }
        });

    </script>
}

