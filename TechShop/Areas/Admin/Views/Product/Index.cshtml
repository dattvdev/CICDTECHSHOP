@model TechShop.Areas.Admin.ViewModels.ProductListViewModel

@Html.Partial("_Create", Model)

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-12">
            <div class="card">
                <div class="card-body">
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb" style="padding: 0px; margin-bottom: 0px; background: none">
                            <li class="breadcrumb-item" aria-current="page"><a href="#">Dashboard</a></li>
                            <li class="breadcrumb-item active" aria-current="page">Products</li>
                        </ol>
                    </nav>
                </div>
            </div>
        </div>
    </div>
    <div class="row justify-content-center">
        <div class="col-md-12 m-3">
            <div class="card">
                <div class="card-body">
                    <div class="d-flex justify-content-end">
                        <button type="button" class="btn btn-primary text-right" data-bs-toggle="modal" data-bs-target="#createProduct">
                            Create New
                        </button>
                    </div>
                
                    <div id="render">
                        @Html.Partial("_ProductTableView",Model)
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script>
        const datatableCate = $("#productTable");
        const url = "/Admin/Product/GetDataProduct";
        console.log(datatableCate)
        handelShowTable(url);
        function handelShowTable(url) {

            showDataTableServerSide(url, datatableCate, [
                { data: "id", visible: false },
                { data: "name", title: "Name" },
                { data: "categoryName", title: "Category" },
                { data: "brandName", title: "Brand" },
                { data: "urlSlug", title: "Url Slug" },
                { data: "createdAt", title: "Create At" },
                { data: "updatedAt", title: "Updated At" }
            ], true, false, false, (dataTableInstance) => {
                dt = dataTableInstance
            });
        }
        function showDataTableServerSide(url, dataTable, columnOptions, isAddBtnDetail = false, isAddBtnEdit = false, isAddBtnDelete = false, callBack) {

            if (isAddBtnDetail == true || isAddBtnEdit == true || isAddBtnDelete == true) {
                columnOptions.push({
                    data: null,
                    orderable: false,
                    className: "text-center",
                    render: function (data, type, row) {
                        let buttons = '';
                        if (isAddBtnDetail) {
                            buttons += `<button class="btn btn-info detail-btn" data-id="${row.id}">Detail</button> `;
                        }
                        if (isAddBtnEdit) {
                            buttons += `<button class="btn btn-primary edit-btn" data-id="${row.id}">Edit</button> `;
                        }
                        if (isAddBtnDelete) {
                            buttons += `<button class="btn btn-danger delete-btn" data-id="${row.id}">Delete</button>`;
                        }
                        return buttons.trim();
                    }
                });
            }

            const dataTableInstance = dataTable.DataTable({
                processing: true,
                serverSide: true,
                destroy: true,
                select: true,
                responsive: true,
                rowReorder: {
                    selector: 'td:nth-child(2)'
                },
                ajax: {
                    url: url,
                    type: 'POST',
                    dataFilter : function(data){
                        var json = jQuery.parseJSON(data);
                        json.data.forEach(function (item) {
                            item.name = `<a href='/Admin/Product/Details/${item.id}'>${item.name}</a>`;
                        });
                        console.log(json)
                        return JSON.stringify(json);
                    }
                },
                language: {
                    search: "",
                    searchPlaceholder: "Search...",
                    infoFiltered: ""
                },
                columns: columnOptions,
                lengthMenu: [5, 10, 25, 50, 100]
            });

            callBack(dataTableInstance, dataTable)
        }
    </script>
}
