@model TechShop.Core.Models.Brand

<div class="modal fade" id="createModal" tabindex="-1" role="dialog" aria-labelledby="centeredModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createModalLabel">Create Brand</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="createForm" asp-action="Create" method="post">
                    @Html.AntiForgeryToken()

                    <div class="form-group">
                        <label asp-for="Name" class="control-label"></label>
                        <input asp-for="Name" class="form-control" />
                        <span asp-validation-for="Name" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="Description" class="control-label"></label>
                        <input asp-for="Description" class="form-control" />
                    </div>
                    <div class="form-group">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <input type="button" id="createsubmit" value="Create" class="btn btn-primary" />
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    $("#createForm").validate({
        rules: {
            Name: {
                required: true,
                maxlength: 99,
                normalizer: function (value) {
                    return $.trim(value);
                }
            },
            Description: {
                maxlength: 99,
            }
        },
        messages: {
            Name: {
                required: "Please enter brand name",
                maxlength: "The name length is not greater than 100 character"
            },
            Description: {
                maxlength: "The description length is not greater than 100 character"
            }
        },
        errorClass: "text-danger", 
        validClass: "text-success",
        errorElement: "span"
    });</script>
<script>
    $(document).ready(function () {
        const _url = "/Admin/Brands/GetDataBrands";
        const datatableBrand = $("#brandsTable");
        let dt = null;

        $('#Name').on('input', function () {
            $('#nameExistError').remove();
        });

        $('#createsubmit').on('click', function (e) {
            e.preventDefault(); // Ngăn không cho form submit theo cách thông thường

            var form = $('#createForm');
            var name = $('#Name').val();
            checkBrandExist(name, handleExist, handleNotExist);

        });

        function checkBrandExist(name, existCallback, notExistCallback) {
            $.ajax({
                url: '@Url.Action("IsBrandExist", "Brands")',
                type: 'GET',
                data: {
                    id: null,
                    name: name,
                    des: null,
                },
                success: function (data) {
                    data ? existCallback() : notExistCallback();
                },
                error: function (xhr) {
                    console.log(xhr.responseText);
                }
            });
        }

        function handleExist() {
            $('#nameExistError').remove();
            $('#Name').after('<span id="nameExistError" class="text-danger">Brand with this name already exists.</span>');
        }

        function handleNotExist() {
            $('#nameExistError').remove();
            var form = $('#createForm');
            if (form.valid()) {
                submitForm(form);
            }
        }

        function submitForm(form) {
            var url = form.attr('action');
            var data = form.serialize();

            $.ajax({
                type: 'POST',
                url: url,
                data: data,
                success: function (response) {
                    // Show Alert
                    if (response.length != 0) {
                        handelShowTable(_url)
                        showAlertSuccess("Create successfully!");
                    } else {
                        showAlertError("Create fail!");
                    }

                },
                error: function (xhr, status, error) {

                    // Handle errors here
                    console.error('Error:', status, error);
                }
            });
            $('#createModal').modal('hide');
        }

        function handelShowTable(url) {

            showDataTableServerSide(url, datatableBrand, [
                { data: "id", visible: false },
                { data: "name", title: "Brand Name" },
                { data: "description", title: "Description" },
                { data: "urlSlug", title: "UrlSlug" },
                { data: "createAt", title: "CreateAt" },
                { data: "updateAt", title: "UpdateAt" }
            ], false, true, true, (dataTableInstance) => {
                dt.destroy();
                dt = dataTableInstance
                dataTableInstance.on('click', '.delete-btn', function () {

                    const _id = $(this).data('id');
                    var url = '@Url.Action("Delete", "Brands")/' + _id.toUpperCase();
                    console.log(url, _id);

                    $('#deleteModalContent').load(url, function () {
                        $(document).on('hidden.bs.modal', '.modal', function () {
                            $(this).remove();
                        });
                        $('#centeredModalDelete').modal('show');
                    });
                    console.log(dt, _id.toUpperCase());
                });
                dataTableInstance.on('click', '.edit-btn', function () {

                    const _id = $(this).data('id');
                    var url = '@Url.Action("Edit", "Brands")/' + _id;
                    $(document).on('hidden.bs.modal', '.modal', function () {
                        $(this).remove();
                    });
                    $('#editModalContent').load(url, function () {
                        $('#editModal').modal('show');
                    });
                    console.log(dt, _id);
                })
            });
        }
        function showDataTableServerSide(url, dataTable, columnOptions, isAddBtnDetail = true, isAddBtnEdit = true, isAddBtnDelete = true, callBack) {

            if (isAddBtnDetail == true || isAddBtnEdit == true || isAddBtnDelete == true) {
                columnOptions.push({
                    data: null,
                    orderable: false,
                    className: "text-center",
                    render: function (data, type, row) {
                        let buttons = '';
                        if (isAddBtnDetail) {
                            buttons += `<button class="btn btn-info detail-btn" data-id="${row.id}">Detail</button> `;
                        }
                        if (isAddBtnEdit) {
                            buttons += `<button class="btn btn-primary edit-btn" data-id="${row.id}">Edit</button> `;
                        }
                        if (isAddBtnDelete) {
                            buttons += `<button class="btn btn-danger delete-btn" data-id="${row.id}">Delete</button>`;
                        }
                        return buttons.trim();
                    }
                });
            }

            const dataTableInstance = dataTable.DataTable({
                responsive: true,
                rowReorder: {
                    selector: 'td:nth-child(2)'
                },
                processing: true,
                serverSide: true,
                destroy: true,
                select: true,
                ajax: {
                    url: url,
                    type: 'POST'
                },
                language: {
                    search: "",
                    searchPlaceholder: "Search...",
                    infoFiltered: ""
                },
                columns: columnOptions,
                lengthMenu: [5, 10, 25, 50, 100]
            });

            callBack(dataTableInstance, dataTable)
        }
    });

</script>
