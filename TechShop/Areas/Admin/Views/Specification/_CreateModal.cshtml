@model TechShop.Core.Models.Specification

<div class="modal fade" id="createModal" tabindex="-1" aria-labelledby="centeredModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="createModalLabel">Create</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<form asp-action="Create" id="createForm" method="post">
					@Html.AntiForgeryToken()
					<div class="form-group">
						<label asp-for="Name" class="control-label"></label>
						<input asp-for="Name" id="Name" class="form-control" />
						<span asp-validation-for="Name" class="text-danger" id="NameError"></span>
					</div>
					<div class="form-group">
						<label asp-for="CategoryId" class="control-label"></label>
						<select asp-for="CategoryId" id="CategoryId" class="form-control" asp-items="ViewBag.CategoryId"></select>
						<span asp-validation-for="CategoryId" class="text-danger"></span>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
						<input type="button" id="createsubmit" value="Create" class="btn btn-primary" />
					</div>
				</form>
			</div>
		</div>
	</div>
</div>

<script>
	$.validator.addMethod("lettersOnly", function (value, element) {
		return this.optional(element) || /^[a-zA-Z\s]+$/.test(value);
	}, "Name must contain only letters and spaces");
	$("#createForm").validate({
		rules: {
			Name: {
				required: true,
				maxlength: 99,
				lettersOnly: true,
				normalizer: function (value) {
					return $.trim(value);
				}
			}
		},
		messages: {
			Name: {
				required: "Name is required",
				maxlength: "The name length is not greater than 100 character",
				lettersOnly: "Name must contain only letters and spaces"
			}
		},
		errorClass: "text-danger",
		validClass: "text-success",
		errorElement: "span"
	});</script>
<script>
	$(document).ready(function () {
		const datatableCate = $("#specificationTable");
		const _url = "/Admin/Specification/GetDataSpecification";
		let dt = null;
		console.log(datatableCate)
		function handelShowTable(url) {

			showDataTableServerSide(url, datatableCate, [
				{ data: "id", visible: false },
				{ data: "name", title: "Specification Name" },
				{ data: "categoryName", title: "Cateogry Name" },
			], false, true, true, (dataTableInstance) => {
				dt.destroy();
				dt = dataTableInstance
				dataTableInstance.on('click', '.delete-btn', function () {

					const _id = $(this).data('id');
					var _url = '@Url.Action("Delete", "Specification")/' + _id.toUpperCase();
					console.log(_url, _id);
					$('#deleteModalContent').load(_url, function () {
						$(document).on('hidden.bs.modal', '.modal', function () {
							$(this).remove();
						});
						$('#centeredModalDelete').modal('show');
					});
					console.log(dt, _id.toUpperCase());
				});
				dataTableInstance.on('click', '.edit-btn', function () {

					const _id = $(this).data('id');
					var _url = '@Url.Action("Edit", "Specification")/' + _id;
					$(document).on('hidden.bs.modal', '.modal', function () {
						$(this).remove();
					});
					$('#editModalContent').load(_url, function () {
						$('#editModal').modal('show');
					});
					console.log(dt, _id);
				})
			});
		}
		function checkSpecificationExist(name, categoryId, existCallback, notExistCallback) {
			$.ajax({
				url: '@Url.Action("IsSpecificationExist", "Specification")',
				type: 'GET',
				data: {
					name: name,
					categoryId: categoryId
				},
				success: function (data) {
					data ? existCallback() : notExistCallback();
				},
				error: function (xhr) {
					console.log(xhr.responseText);
				}
			});
		}

		function handleExist() {
			$('#nameExistError').remove();
			$('#Name').after('<span id="nameExistError" class="text-danger">Filter with this name and category, specification already exists.</span>');
		}

		function handleNotExist() {
			$('#nameExistError').remove();
			var form = $('#createForm');
			if (form.valid()) {
				submitForm(form);
			}
		}
		function showDataTableServerSide(url, dataTable, columnOptions, isAddBtnDetail = true, isAddBtnEdit = true, isAddBtnDelete = true, callBack) {

			if (isAddBtnDetail == true || isAddBtnEdit == true || isAddBtnDelete == true) {
				columnOptions.push({
					data: null,
					orderable: false,
					className: "text-center",
					render: function (data, type, row) {
						let buttons = '';
						if (isAddBtnDetail) {
							buttons += `<button class="btn btn-info detail-btn" data-id="${row.id}">Detail</button> `;
						}
						if (isAddBtnEdit) {
							buttons += `<button class="btn btn-primary edit-btn" data-id="${row.id}">Edit</button> `;
						}
						if (isAddBtnDelete) {
							buttons += `<button class="btn btn-danger delete-btn" data-id="${row.id}">Delete</button>`;
						}
						return buttons.trim();
					}
				});
			}

			const dataTableInstance = dataTable.DataTable({
				processing: true,
				serverSide: true,
				destroy: true,
				select: true,
				ajax: {
					url: url,
					type: 'POST'
				},
				language: {
					search: "",
					searchPlaceholder: "Search...",
					infoFiltered: ""
				},
				columns: columnOptions,
				lengthMenu: [5, 10, 25, 50, 100]
			});

			callBack(dataTableInstance, dataTable)
		}
		$('#createsubmit').on('click', function (e) {
			e.preventDefault(); // Prevent the form from submitting normally

			var form = $('#createForm');
			var newName = $('#Name').val().replace(/\s+/g, ' ').trim().toLowerCase(); // Get the new name from the form
			var isDuplicate = false;
			var categoryId = $('#CategoryId').val();
			var editBtn = $('.edit-btn');
			checkSpecificationExist(newName, categoryId, handleExist, handleNotExist);
		
			/*$('#specificationTable tbody tr').each(function () {
				var existingName = $(this).find('td').eq(0).text().trim().toLowerCase();
				//var existingCate = $(this).find('td').eq(1).text().trim().toLowerCase();
				if (newName === existingName) {
					isDuplicate = true;
					return false; 
				}
			});*/

			/*if (isDuplicate) {
				$('#NameError').text('Specification name already exists.').addClass('text-danger');
			}
			else {*/
				//$('#NameError').text('');

			
			/*}*/
		});	
		
        function submitForm(form) {
			if (form.valid()) {
				var url = form.attr('action');
				var data = form.serialize();

				$.ajax({
					type: 'POST',
					url: url,
					data: data,
					success: function (response) {
						if (response.length != 0) {
							showAlertSuccess("Create success!");
							handelShowTable(_url);
						} else {
							showAlertError("Create failed!");
						}
					},
					error: function (xhr, status, error) {
						console.log(xhr.responseText, error);
					}
				});
				$('#createModal').modal('hide');
			}
		}
	});

</script>
